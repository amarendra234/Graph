#include <bits/stdc++.h>
using namespace std;
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
     vector<vector<int>> adj(n + 1);
      for (const auto& edge : edges) {
        int u = edge[0];
        int v = edge[1];
        adj[u].push_back(v);
        adj[v].push_back(u);  // undirected graph
    }
    bool vis[n+1];
    int parent[n+1];
    for(int i=0;i<=n;i++){
        vis[i]=false;
        parent[i]=-1;
    }
    for(int i=1;i<=n;i++){
        if(!vis[i]){
            queue<int>q;
            q.push(i);
            vis[i]=true;
            
            while(q.size()>0){
                int ele=q.front();
                q.pop();
                for(auto nbr:adj[ele]){
                    if(!vis[nbr]){
                        q.push(nbr);
                        vis[nbr]=true;
                        parent[nbr]=ele;
                    }else if(parent[ele]!=nbr){
                          return "Yes";
                    }
                }
            }
        }
    }
    return "No";
}
