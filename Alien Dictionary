class Solution {
  public:
    string findOrder(string dict[], int n, int k) {
        // code here
        // adjancy list using unordered_map
        unordered_map<char,list<char>>adj;
        unordered_map<char,int>Inorder;
        for(int i=0;i<n;i++){
            for(int j=0;j<dict[i].length();j++){
                Inorder[dict[i][j]]=0;
            }
        }
        for(int i=0;i<n-1;i++){
            string str1=dict[i];
            string str2=dict[i+1];
            for(int j=0;j<min(str1.length(),str2.length());j++){
                if(str1[j]!=str2[j]){
                    adj[str1[j]].push_back(str2[j]);
                    Inorder[str2[j]]++;
                    break;
                }
            }
            
        }
        queue<char>q;
        for(auto nbr:Inorder){
            if(nbr.second==0){
                q.push(nbr.first);
            }
        }
        string ans="";
        int count=0;
        while(!q.empty()){
            char ch=q.front();q.pop();
            ans+=ch;
            count++;
            for(auto nbr:adj[ch]){
                Inorder[nbr]--;
                if(Inorder[nbr]==0){
                    q.push(nbr);
                }
            }
        }
        if(count==Inorder.size()){
            return ans;
        }
        return "";
    }
};

//{ Driver Code Starts.
string order;

bool f(string a, string b) {
    int p1 = 0;
    int p2 = 0;
    for (int i = 0; i < min(a.size(), b.size()) and p1 == p2; i++) {
        p1 = order.find(a[i]);
        p2 = order.find(b[i]);
        //	cout<<p1<<" "<<p2<<endl;
    }

    if (p1 == p2 and a.size() != b.size())
        return a.size() < b.size();

    return p1 < p2;
}

// Driver program to test above functions
int main() {
    int t;
    cin >> t;
    while (t--) {
        int N, K;
        cin >> N >> K;
        string dict[N];
        for (int i = 0; i < N; i++)
            cin >> dict[i];

        Solution obj;
        string ans = obj.findOrder(dict, N, K);
        order = "";
        for (int i = 0; i < ans.size(); i++)
            order += ans[i];

        string temp[N];
        std::copy(dict, dict + N, temp);
        sort(temp, temp + N, f);

        bool f = true;
        for (int i = 0; i < N; i++)
            if (dict[i] != temp[i])
                f = false;

        if (f)
            cout << 1;
        else
            cout << 0;
        cout << endl;

        cout << "~"
             << "\n";
    }
    return 0;
}

// } Driver Code Ends
