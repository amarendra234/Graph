class Solution {
public:
       bool dfs(vector<int>adj[],int src,bool vis[],bool curr[],stack<int>&st){
        vis[src]=true;
        curr[src]=true;
        for(auto nbr:adj[src]){
            if(!vis[nbr]){
                bool ans=dfs(adj,nbr,vis,curr,st);
                if(ans){
                    return true;
                }
            }else if(curr[nbr]==true){
                return true;
            }
        }
        st.push(src);
        curr[src]=false;
        return false;
    }
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
         bool vis[numCourses];
        bool current_recursion[numCourses];
        stack<int>st;
        for(int i=0;i<numCourses;i++){
            vis[i]=false;
            current_recursion[i]=false;
        }
        vector<int>adj[numCourses];
        for(int i=0;i<prerequisites.size();i++){
            int u=prerequisites[i][0];
            int v=prerequisites[i][1];
            adj[v].push_back(u);
        }
        vector<int>ans;
        for(int i=0;i<numCourses;i++){
            if(!vis[i]){
                bool check=dfs(adj,i,vis,current_recursion,st);
                if(check){
                    return ans;
                }
            }
        }
        while(st.size()>0){
            ans.push_back(st.top());
            st.pop();
        }
        return ans;
    }
};
