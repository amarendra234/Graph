class Solution {
public:
    int shortestPath(vector<vector<int>>& grid, int k) {
        queue<pair<int,pair<int,pair<int,int>>>>q;// store distance with obstacle state and obstacle
        q.push({0,{0,{0,0}}});
        int n=grid.size();
        int m=grid[0].size();
        int vis[n][m][k+1];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                for(int l=0;l<=k;l++){
                    vis[i][j][l]=0;
                }
            }
        }
        vis[0][0][0]=1;
        int x[]={-1,1,0,0};
        int y[]={0,0,-1,1};
        while(!q.empty()){
            int x_i=q.front().first;
            int y_i=q.front().second.first;
            int obstacle=q.front().second.second.first;
            int distance=q.front().second.second.second;
            q.pop();
            if(x_i==n-1 and y_i==m-1){
                return distance;
            }
            for(int i=0;i<=3;i++){
                int lx=x[i]+x_i;
                int ly=y[i]+y_i;
                if(lx>=0 and lx<n and ly>=0 and ly<m){
                   if(grid[lx][ly]==0 and !vis[lx][ly][obstacle]){
                       q.push({lx,{ly,{obstacle,distance+1}}});
                        vis[lx][ly][obstacle]=1;
                   }
                    else if(grid[lx][ly]==1 and obstacle<k and !vis[lx][ly][obstacle+1]){
                        q.push({lx,{ly,{obstacle+1,distance+1}}});
                        vis[lx][ly][obstacle+1]=1;
                    }
                }
            }
        }
        return -1;
    }
};
