class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
          vector<pair<int,int>>adj[n+1];
          for(int i=0;i<times.size();i++){
              int u=times[i][0];
              int v=times[i][1];
              int weight=times[i][2];
              adj[u].push_back({v,weight});
          }
          vector<int>dist(n+1,INT_MAX);
          dist[k]=0;
          priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
          pq.push({k,0});
          while(pq.size()>0){
             int node=pq.top().first;
             int d=pq.top().second;
             pq.pop();
             for(auto nbr:adj[node]){
                int adjnode=nbr.first;
                int time=nbr.second;
                if((d+time)<dist[adjnode]){
                    dist[adjnode]=d+time;
                    pq.push({adjnode,dist[adjnode]});
                }
             }
          }
          int maxi=INT_MIN;
          for(int i=1;i<=n;i++){
             maxi=max(maxi,dist[i]);
          }
          if(maxi==INT_MAX){
            return -1;
          }
          return maxi;
    }
};
