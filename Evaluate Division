class Solution {
public:
   void dfs(unordered_map<string,vector<pair<string,double>>>adj,unordered_set<string>&vistied,string src,string dest,double &ans,double product){
               if(vistied.find(src)!=vistied.end()){
                  return;
               }
               vistied.insert(src);
               if(src==dest){
                  ans=product;
                  return;
               }
               for(auto nbr:adj[src]){
                   string node=nbr.first;
                   double val=nbr.second;
                   dfs(adj,vistied,node,dest,ans,val*product);

               }
   }
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
           // creating map from both sides
           unordered_map<string,vector<pair<string,double>>>adj;
           vector<double>res;
           int n=equations.size();
           for(int i=0;i<n;i++){
              string u=equations[i][0];
              string v=equations[i][1];
              double value=values[i];
              adj[u].push_back({v,value});
              adj[v].push_back({u,1.0/value});
           }
           for(auto query:queries){
                 string src=query[0];
                 string dest=query[1];
                 double ans=-1.0;
                 double product=1.0;
                 unordered_set<string>vistied;
                 if(adj.find(src)!=adj.end()){
                   dfs(adj,vistied,src,dest,ans,product);
                 }
                 res.push_back(ans);
                 
           }
           return res;
    }
};
