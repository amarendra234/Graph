 bool isBipartite(vector<vector<int>>& graph) {
        int n=graph.size();
        vector<int>color(n,-1);
        vector<int>adj[n];
        for(int i=0;i<n;i++){
            for(auto nbr:graph[i]){
                adj[i].push_back(nbr);
               // adj[nbr].push_back(i);
            }
        }
        // for(int i=0;i<n;i++){
        //     if(color[i]==-1){
        //         bool check =dfs(adj,i,color,1);
        //        if(check){
        //         return false;
        //        }
        //     }
        // }
         for(int i=0;i<n;i++){
            if(color[i]==-1){
                queue<int>q;
                q.push(i);
                color[i]=1;
                while(q.size()>0){
                    int node=q.front();
                    int curr_color=color[node];
                    q.pop();
                    for(auto nbr:adj[node]){
                        if(color[nbr]==-1){
                            q.push(nbr);
                            color[nbr]=1-curr_color;
                        }
                        if(color[nbr]==color[node]){
                            return false;
                        }
                    }
                }
            }
         }
        return true;
    }
};
